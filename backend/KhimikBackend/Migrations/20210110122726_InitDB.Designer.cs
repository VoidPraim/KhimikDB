// <auto-generated />
using System;
using KhimikBackend.Data.Configs.DBConfigs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KhimikBackend.Migrations
{
    [DbContext(typeof(KhimikContext))]
    [Migration("20210110122726_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("GameMentor", b =>
                {
                    b.Property<string>("GamesId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("MentorsId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("GamesId", "MentorsId");

                    b.HasIndex("MentorsId");

                    b.ToTable("GameMentor");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.AgeCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("BeginAge")
                        .HasColumnType("int");

                    b.Property<int>("EndAge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AgeCategory");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Club", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("Club");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Day", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Day");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Game", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ResultDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Team1Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Team1Points")
                        .HasColumnType("int");

                    b.Property<string>("Team2Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Team2Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Team1Id");

                    b.HasIndex("Team2Id");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.IceOccupation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("HoldDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScheduleId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("SessionKindId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SessionKindId");

                    b.ToTable("IceOccupation");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Mentor", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsReferee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RankId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.ToTable("Mentor");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Rank", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Decryption")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Rank");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("DayId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TimeRangeId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("TimeRangeId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.SessionKind", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("SessionKind");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Sportsman", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RankId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.HasIndex("TeamId");

                    b.ToTable("Sportsman");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("AgeCategoryId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ClubId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AgeCategoryId");

                    b.HasIndex("ClubId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.TimeRange", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("BeginTime")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("TimeRange");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Workout", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("MentorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("TeamId");

                    b.ToTable("Workout");
                });

            modelBuilder.Entity("MentorTeam", b =>
                {
                    b.Property<string>("MentorsId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TeamsId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("MentorsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("MentorTeam");
                });

            modelBuilder.Entity("GameMentor", b =>
                {
                    b.HasOne("KhimikBackend.Data.Domains.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KhimikBackend.Data.Domains.Mentor", null)
                        .WithMany()
                        .HasForeignKey("MentorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Game", b =>
                {
                    b.HasOne("KhimikBackend.Data.Domains.Team", "Team1")
                        .WithMany("Games1")
                        .HasForeignKey("Team1Id")
                        .HasConstraintName("Game_Team1_Key");

                    b.HasOne("KhimikBackend.Data.Domains.Team", "Team2")
                        .WithMany("Games2")
                        .HasForeignKey("Team2Id")
                        .HasConstraintName("Game_Team2_Key");

                    b.Navigation("Team1");

                    b.Navigation("Team2");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.IceOccupation", b =>
                {
                    b.HasOne("KhimikBackend.Data.Domains.Game", "Game")
                        .WithOne("IceOccupation")
                        .HasForeignKey("KhimikBackend.Data.Domains.IceOccupation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KhimikBackend.Data.Domains.Workout", "Workout")
                        .WithOne("IceOccupation")
                        .HasForeignKey("KhimikBackend.Data.Domains.IceOccupation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KhimikBackend.Data.Domains.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId");

                    b.HasOne("KhimikBackend.Data.Domains.SessionKind", "SessionKind")
                        .WithMany()
                        .HasForeignKey("SessionKindId");

                    b.Navigation("Game");

                    b.Navigation("Schedule");

                    b.Navigation("SessionKind");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Mentor", b =>
                {
                    b.HasOne("KhimikBackend.Data.Domains.User", "User")
                        .WithOne("Mentor")
                        .HasForeignKey("KhimikBackend.Data.Domains.Mentor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KhimikBackend.Data.Domains.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId");

                    b.Navigation("Rank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Schedule", b =>
                {
                    b.HasOne("KhimikBackend.Data.Domains.Day", "Day")
                        .WithMany()
                        .HasForeignKey("DayId");

                    b.HasOne("KhimikBackend.Data.Domains.TimeRange", "TimeRange")
                        .WithMany()
                        .HasForeignKey("TimeRangeId");

                    b.Navigation("Day");

                    b.Navigation("TimeRange");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Sportsman", b =>
                {
                    b.HasOne("KhimikBackend.Data.Domains.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId");

                    b.HasOne("KhimikBackend.Data.Domains.Team", "Team")
                        .WithMany("Sportsmen")
                        .HasForeignKey("TeamId");

                    b.Navigation("Rank");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Team", b =>
                {
                    b.HasOne("KhimikBackend.Data.Domains.AgeCategory", "AgeCategory")
                        .WithMany()
                        .HasForeignKey("AgeCategoryId");

                    b.HasOne("KhimikBackend.Data.Domains.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.Navigation("AgeCategory");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Workout", b =>
                {
                    b.HasOne("KhimikBackend.Data.Domains.Mentor", "Mentor")
                        .WithMany("Workouts")
                        .HasForeignKey("MentorId");

                    b.HasOne("KhimikBackend.Data.Domains.Team", "Team")
                        .WithMany("Workouts")
                        .HasForeignKey("TeamId");

                    b.Navigation("Mentor");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("MentorTeam", b =>
                {
                    b.HasOne("KhimikBackend.Data.Domains.Mentor", null)
                        .WithMany()
                        .HasForeignKey("MentorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KhimikBackend.Data.Domains.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Game", b =>
                {
                    b.Navigation("IceOccupation");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Mentor", b =>
                {
                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Team", b =>
                {
                    b.Navigation("Games1");

                    b.Navigation("Games2");

                    b.Navigation("Sportsmen");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.User", b =>
                {
                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("KhimikBackend.Data.Domains.Workout", b =>
                {
                    b.Navigation("IceOccupation");
                });
#pragma warning restore 612, 618
        }
    }
}
